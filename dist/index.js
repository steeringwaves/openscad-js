"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scad;
(function (Scad) {
    var Node = /** @class */ (function () {
        function Node(type, props) {
            this.type = type;
            this.props = props;
        }
        return Node;
    }());
    Scad.Node = Node;
    var Variable = /** @class */ (function () {
        function Variable(parent, name, value, opts) {
            this.parent = parent;
            this.name = name;
            this.value = value;
            this.opts = opts;
        }
        Variable.prototype.toString = function () {
            var comment = "";
            if (this.opts && this.opts.comment) {
                comment += "// ".concat(this.opts.comment, "\n");
            }
            return "".concat(comment).concat(this.parent.writeVariable(0, this.name, [this.value]), "\n");
        };
        return Variable;
    }());
    Scad.Variable = Variable;
    var Specials = /** @class */ (function () {
        function Specials(parent) {
            this.parent = parent;
        }
        Specials.prototype.toString = function () {
            var _this = this;
            var entries = Object.entries(this).filter(function (_a) {
                var k = _a[0], v = _a[1];
                return undefined !== v;
            });
            if (0 === entries.length) {
                return "";
            }
            return "/* Specials */\n\n".concat(entries.map(function (_a) {
                var k = _a[0], v = _a[1];
                return _this.parent.writeVariable(0, k, [v]);
            }).join("\n"), "\n");
        };
        return Specials;
    }());
    Scad.Specials = Specials;
    var Module = /** @class */ (function () {
        function Module(opts) {
            if (opts === void 0) { opts = {}; }
            var _this = this;
            this.entires = [];
            this.variables = [];
            this.indent = "\t";
            this.banner = "/* AUTOGENERATED FILE USING @steeringwaves/openscad-js DO NOT MODIFY */\n";
            var proxyModules = new Proxy({
                _bg: this.defineModifier("%"),
                _debug: this.defineModifier("#"),
                _root: this.defineModifier("!"),
                _disable: this.defineModifier("*")
            }, {
                get: function (obj, prop) {
                    if (prop in obj) {
                        return obj[prop];
                    }
                    return _this.defineModule(prop);
                }
            });
            this.any = proxyModules;
            this.modules = proxyModules;
            this.specials = new Specials(this);
            this.opts = opts;
            if (undefined !== opts.fs) {
                this.fs = opts.fs;
            }
            if (undefined !== opts.indent) {
                this.indent = opts.indent;
            }
            if (undefined !== opts.banner) {
                this.banner = opts.banner;
            }
        }
        Module.prototype.addVariable = function (name, value, opts) {
            var v = new Variable(this, name, value, opts);
            this.variables.push(v);
            return v;
        };
        Module.prototype.add = function (node) {
            this.entires.push(node);
            return node;
        };
        Module.prototype.addMultiple = function (nodes) {
            var _a;
            (_a = this.entires).push.apply(_a, nodes);
            return nodes;
        };
        Module.prototype.toString = function () {
            var variableText = "";
            var sections = {};
            var noSections = [];
            for (var i = 0; i < this.variables.length; i++) {
                var v = this.variables[i];
                if (v.opts && v.opts.section) {
                    if (!sections[v.opts.section]) {
                        sections[v.opts.section] = [];
                    }
                    sections[v.opts.section].push(v);
                }
                else {
                    noSections.push(v);
                }
            }
            if (noSections.length > 0) {
                variableText += "/* Variables */\n\n";
                variableText += noSections.map(function (v) { return v.toString(); }).join("\n");
                variableText += "\n";
            }
            // get list of sections alphabetically
            var sectionNames = Object.keys(sections).sort();
            // loop through all sections
            if (sectionNames.length > 0) {
                for (var i = 0; i < sectionNames.length; i++) {
                    var sectionName = sectionNames[i];
                    var section = sections[sectionName];
                    variableText += "/* [ ".concat(sectionName, " ] */\n\n");
                    variableText += section.map(function (v) { return v.toString(); }).join("\n");
                }
                variableText += "\n";
            }
            return "".concat(this.banner, "\n").concat(this.specials.toString(), "\n").concat(variableText, "\n").concat(this.compile(this.entires));
        };
        Module.prototype.toFile = function (filename, verbose) {
            if (!this.fs) {
                throw new Error("no filesystem module provided");
            }
            var scadSrc = this.toString();
            if (verbose) {
                console.log(scadSrc);
            }
            this.fs.writeFileSync(filename, scadSrc);
        };
        Module.prototype.toScadFile = function (src, verbose) {
            this.toFile(sourceFilenameToScadFilename(src), verbose);
        };
        Module.prototype.writeNode = function (depth, node) {
            if ("module" === node.type) {
                var props = node.props;
                return this.writeModule(depth, props.name, props.args, props.children);
            }
            if ("object" === node.type) {
                var props = node.props;
                return this.writeObject(depth, props.name, props.args);
            }
            if ("modifier" === node.type) {
                var props = node.props;
                return this.writeModifier(depth, props.symbol, props.child);
            }
            if ("variable" === node.type) {
                var props = node.props;
                return this.writeVariable(depth, props.name, props.args);
            }
            throw new Error("unexpected node ".concat(node));
        };
        Module.prototype.writeIndent = function (depth) {
            return this.indent.repeat(depth);
        };
        Module.prototype.writeModule = function (depth, name, args, children) {
            var _this = this;
            return "".concat(name, "(").concat(this.writeArgs(args), ") {\n\t\t").concat(children.map(function (c) { return _this.writeIndent(depth + 1) + _this.writeNode(depth + 1, c); }).join("\n"), "\n\t\t").concat(this.writeIndent(depth), "}");
        };
        Module.prototype.writeObject = function (depth, name, args) {
            return "".concat(name, "(").concat(this.writeArgs(args), ");");
        };
        Module.prototype.writeVariable = function (depth, name, args) {
            return "".concat(name, " = ").concat(this.writeArgs(args), ";");
        };
        Module.prototype.writeArgs = function (args) {
            var _this = this;
            return args
                .filter(function (arg) {
                return "number" === typeof arg ||
                    "boolean" === typeof arg ||
                    "string" === typeof arg ||
                    Array.isArray(arg) ||
                    Object.entries(arg).length > 0;
            })
                .map(function (arg) { return _this.writeValue(arg, true); })
                .join(", ");
        };
        Module.prototype.writeValue = function (value, isArg) {
            var _this = this;
            if (isArg === void 0) { isArg = false; }
            if (value instanceof Scad.Variable) {
                return value.name;
            }
            if ("number" === typeof value || "boolean" === typeof value) {
                return String(value);
            }
            if ("string" === typeof value) {
                return "\"".concat(value.replace(/"/g, '"'), "\"");
            }
            if (Array.isArray(value)) {
                return "[".concat(value.map(function (v) { return _this.writeValue(v); }).join(", "), "]");
            }
            if (isArg) {
                return Object.entries(value)
                    .map(function (_a) {
                    var k = _a[0], v = _a[1];
                    return "".concat(k, "=").concat(_this.writeValue(v));
                })
                    .join(", ");
            }
            throw new Error("unexpected value ".concat(value));
        };
        Module.prototype.writeModifier = function (depth, symbol, child) {
            return symbol + this.writeNode(depth, child);
        };
        Module.prototype.compile = function (node) {
            var _this = this;
            if (Array.isArray(node)) {
                return node.map(function (n) { return _this.writeNode(0, n); }).join("\n");
            }
            return this.writeNode(0, node);
        };
        Module.prototype.defineModule = function (name) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var result = function scadModule() {
                    var children = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        children[_i] = arguments[_i];
                    }
                    return { type: "module", props: { name: name, args: args, children: children } };
                };
                Object.assign(result, { type: "object", props: { name: name, args: args } });
                return result;
            };
        };
        Module.prototype.defineModifier = function (symbol) {
            return function (child) { return ({ type: "modifier", props: { symbol: symbol, child: child } }); };
        };
        return Module;
    }());
    Scad.Module = Module;
})(Scad || (Scad = {})); // namespace Scad
function sourceFilenameToScadFilename(src) {
    return "".concat(src.replace(/\.ts$/i, "").replace(/\.js$/i, ""), ".scad");
}
exports.default = Scad;
//# sourceMappingURL=index.js.map